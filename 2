#include <iostream>
#include <string>
#include <bits/stdc++.h>
using namespace std;

class BigReal {
private:
    string BigNumber,integer,fraction;
    char sign;

public:
    // Constructor
    BigReal(){
        integer='0';
        fraction='0';
    }

    BigReal(string real){
        if(regex_match(real,regex("[+-]?\\d+"))){
            if(real[0]=='+'){  //+11
                sign='+';
                real[0]='0';
                integer=real;
                fraction="0";
            }

            else if(real[0]=='-'){
                sign='-';
                real[0]='0';
                integer=real;
                fraction="0";
            }
            else{
                sign='+';
                integer=real;
                fraction="0";
            }
        }
        else if(regex_match(real,regex("[+-]?\\d*.?\\d+"))){
            if(real[0]=='+'){  //+11.11
                sign='+';
                real[0]='0';
                integer=real.substr(0,real.find('.'));
                fraction=real.substr(integer.size()+1,real.size()-1);
            }

            else if(real[0]=='-'){  //-11.11
                sign='-';
                real[0]='0';
                integer=real.substr(0,real.find('.'));
                fraction=real.substr(integer.size()+1,real.size()-1);
            }
            else{      //11.11
                sign='+';
                if(real[0]=='.'){
                    integer="0";
                    fraction=real.substr(integer.size(),real.size()-1);
                }
                else{
                    integer=real.substr(0,real.find('.'));
                    fraction=real.substr(integer.size()+1,real.size()-1);
                }
            }
        }
        else{
            BigNumber="0.0";
        }
    }
    void printf(){
        cout<<integer<<" "<<fraction;
    }

    ////***************************************************** Add two BigDouble numbers*********************************************
    void add(BigReal& other){
        string result = "";
        char result_sign;
        int carry = 0;
        if(sign == '+' && other.sign == '+'){
            result_sign = '+';
        }
        else if(sign == '-' && other.sign == '-'){
            result_sign = '-';
        }
        else{
            // Subtraction
        }

        // Firstly we need to make the number of digits equal in both a and b
        // padding with zero's
        if(fraction.size() != other.fraction.size()){
            if(fraction.size() > other.fraction.size()){
                int dif = fraction.size() - other.fraction.size();
                while(dif--){
                    other.fraction = other.fraction +  "0";
                }
            }
            else{
                int dif = other.fraction.size() - fraction.size();
                while(dif--){
                    fraction = fraction + "0";
                }
            }
        }
        // Adding the fraction , integer parts

        // Adding the fraction part
        int fractionSize_a = fraction.size();
        int fractionSize_b = other.fraction.size();
        int i = fractionSize_a - 1;
        int j = fractionSize_b - 1;

        int sum;
        while (i >= 0 || j >= 0) {
            sum = carry;
            if (i >= 0)
                sum += (fraction[i] - '0');
            if (j >= 0)
                sum += (other.fraction[j] - '0');
            carry = sum / 10;
            sum %= 10;
            result = to_string(sum) + result;
            i--; j--;
        }


        // Adding the integer part
        int integerSize_a = integer.size();
        int integerSize_b = other.integer.size();
        i = integerSize_a - 1;
        j = integerSize_b - 1;
        while (i >= 0 || j >= 0) {
            sum = carry;
            if (i >= 0)
                sum += (integer[i] - '0');
            if (j >= 0)
                sum += (other.integer[j] - '0');
            carry = sum / 10;
            sum %= 10; // It gives the current digit of result
            result = to_string(sum) + result;
            i--; j--;
        }

        if (carry > 0) {
            result = to_string(carry) + result;
        }

        int dot_position;

        cout << "Result: ";
        cout << result_sign << " " << result << endl;
    }

};

int main() {
    string s1, s2;
    cout << "Enter the first number:";
    getline(cin,s1);
    cout << endl;
    cout << "Enter the second number:";
    getline(cin , s2);
    BigReal a(s1);
    BigReal b(s2);
    cout << "Sum:";
    a.add(b);

    return 0;
}



